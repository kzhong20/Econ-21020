x = seq(1000, 2000, by=10);
y = dnorm(x, mean(sample_means50$mean), sd(sample_means50$mean))
lines(x, y)
hist(sample_means100$mean, breaks = 50, freq=F, xlab="mean", main="")
x = seq(1000, 2000, by=10);
y = dnorm(x, mean(sample_means100$mean), sd(sample_means100$mean))
lines(x, y)
hist(sample_means100$mean, breaks = 50, freq=F, xlab="mean", main="")
x = seq(1000, 2000, by=10);
y = dnorm(x, mean(sample_means100$mean), sd(sample_means100$mean))
lines(x, y)
hist(sample_means100$mean, breaks = 50, freq=F, xlab="mean", main="")
x = seq(1000, 2000, by=10);
y = dnorm(x, mean(sample_means100$mean), sd(sample_means100$mean))
lines(x, y)
hist(sample_means100$mean, breaks = 50, freq=F, xlab="mean", main="")
x = seq(1000, 2000, by=10);
y = dnorm(x, mean(sample_means100$mean), sd(sample_means100$mean))
mean(sample_means10)
mean(sample_means10$mean)
sd(sample_means10$mean)
pnorm(1450, 1499.69, 505.5089/sqrt(100))
pnorm(1450, 1499.69, 505.5089/sqrt(100))
table(sample_means100 < 1450)
table(sample_means100 < 1450)/5000
sample_means100
pnorm(1450, 1499.69, 505.5089/sqrt(100))
table(sample_means100 < 1450)/5000
histogram(~Petal.Length, data=iris, nint=18)
library("lattice");
source("~/.active-rstudio-document", echo=TRUE)
histogram(~Petal.Length, data=iris, nint=18)
View(sample_means100)
data(iris)
boxplot(hwdata, horizontal = F)
boxplot(hwdata, horizontal = T)
fivenum(hwdata)
source("~/.active-rstudio-document", echo=TRUE)
histogram(~Petal.Length, data=iris, nint=18)
bwplot(~Sepal.Length, data=iris)
bwplot(Petal.Length~Species, data=iris)
bwplot(Sepal.Length~Species, data=iris)
library("openintro")
data(satgpa)
histogram(~$sat_sum)
histogram(satgpa$sat_sum)
summary(satgpa)
histogram(~sat_sum,data=satgpa,breaks=c(53,63,73,83,93,103,113,123,133,144))
histagram(~sat_sum,data=satgpa,breaks=c(53,63,73,83,93,103,113,123,133,144))
histogram(~sat_sum,data=satgpa,breaks=c(53,63,73,83,93,103,113,123,133,144))
hist(~sat_sum,data=satgpa,breaks=c(53,63,73,83,93,103,113,123,133,144))
histogram(~sat_sum,data=satgpa,breaks=c(53,63,73,83,93,103,113,123,133,144))
source("~/.active-rstudio-document", echo=TRUE)
histogram(~sat_sum,data=satgpa,breaks=c(53,63,73,83,93,103,113,123,133,144))
histogram(~sat_sum,data=satgpa,nint=50)
histogram(~sat_sum,data=satgpa,nint=30)
histogram(~sat_sum,data=satgpa,nint=20)
histogram(~sat_sum,data=satgpa,nint=25)
sat_sum
satgpa$sat_sum
histogram(~sat_sum,data=satgpa,nint=35)
histogram(~sat_sum,data=satgpa,nint=50)
histogram(~sat_sum,data=satgpa,nint=30)
histogram(~sat_sum,data=satgpa,nint=40)
histogram(~sat_sum,data=satgpa,nint=45)
histogram(~sat_sum,data=satgpa,nint=50)
histogram(~sat_sum,data=satgpa,nint=100)
histogram(~sat_sum,data=satgpa,nint=50)
qnorm(c(.1,.25,.5,.75,.9))
summary(satgpa)
quantile(rnorm(200),probs = seq(0.01,0.99,0.01))
quantile(satgpa$sat_sum,probs = (0.1,0.25))
quantile(satgpa$sat_sum,probs = (0.1,0.25,0.01))
quantile(satgpa$sat_sum, probs = (0.1,0.25,0.01))
summary(satgpa$sat_sum)
mean(satgpa$sat_sum)
sd(satgpa$sat_sum)
meanval= mean(satgpa$sat_sum)
sdval = sd(satgpa$sat_sum)
.1*sdval+meanval
.1*sdval+meanval
.25*sdval+meanval
.5*sdval+meanval
.75*sdval+meanval
.9*sdval+meanval
qnorm(c(.1,.25,.5,.75,.9))
pZ=(1:1000)/(1001)
pZ=(1:1000)/(1001)
qn=qnorm(pZ)
sZ= c(104.7577, 106.9008, 110.4727, 114.0445, 116.1876)
sZ= c(104.7577, 106.9008, 110.4727, 114.0445, 116.1876)
qplot(sZ, qn)
library(tidyverse)
library(lattice)
library("openintro")
qplot(sZ, qn)
qn
library("openintro")
source("~/.active-rstudio-document", echo=TRUE)
quantile = quantile (satgpa$sat_sum, probs = c(.1,.25,.5,.75,.9))
m = mean(satgpa$sat_sum)
sd = sd(sastgpa$sat_sum)
Z = (quantile-mean)/sd
sd = sd(sasgpa$sat_sum)
Z = (quantile-mean)/sd
sd = sd(satgpa$sat_sum)
Z = (quantile-mean)/sd
Z = (quantile-m)/sd
Z = (quantile_value-m)/sd
quantile_value = quantile (satgpa$sat_sum, probs = c(.1,.25,.5,.75,.9))
Z = (quantile_value-m)/sd
Z
qnorm(c(.1,.25,.5,.75,.9))
pZ=(1:1000)/(1001)
qn=qnorm(pZ)
pZ=(1:1000)/(1001)
qn=qnorm(pZ)
sZ = sort(satgpa$sat_sum)
qplot(sZ,qn)
qplot(qn,sZ)
qplot(qn,sZ,xlab = "Theoretical Quantiles", ylab = "Sample Quantiles")
qplot(qn,sZ,xlab = "Theoretical Quantiles", ylab = "Sample Quantiles", main = "QQ Plot By Hand")
plot(qn,sZ,xlab = "Theoretical Quantiles", ylab = "Sample Quantiles", main = "QQ Plot By Hand")
qqnorm(Z)
qqnorm(satgpa$sat_sum)
library(openintro)
normTail(m=506, s=15.91)
abline(v=1012*.46)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
# sampling distribution of xbar
hist(xbar, probability=T, nclass = 20, main="Histogram of xbar, df = 1");
# sampling distribution of xbar
hist(xbar, probability=T, nclass = 20, main="Histogram of xbar, df = 2");
nv = 2;
nv = 3;
nv = 10;
lines(xnorm, ynorm, col=2)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
boxplot(xbar, probability=T, nclass = 20, main="Boxplot of xbar, df = 2")
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
num.rejected1 <- sum(pvalue1 <= alpha);
source("~/.active-rstudio-document", echo=TRUE)
library(openintro)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
# part (c) - generate histogram and boxplot of the sample means.
library(mosaic)
source("~/.active-rstudio-document", echo=TRUE)
pvalue <- 2 * (1 - pnorm( abs(zstat)));
# part (b) - check some numerical summaries
favstats(xbar);
zbar <- (xbar - mu0) / (sigma/sqrt(n));
pvalue <- 2 * (1 - pnorm( abs(zstat)));
library(openintro)
#set up simulation constants
# sample size
n = 12
# significance level
alpha <- 0.05
# true population mean
mu <- 25
2
# population sd
sigma <- 4
# population mean under H_0
mu0 = 25;
# num of simulated data
num.simulations <- 1000
# Simulating data: step 1-6
xbar <- replicate(num.simulations, mean(rnorm(n, mu, sigma)));
SDxbar <- sigma/sqrt(n);
zstar <- -qnorm(alpha/2);
lower <- xbar - zstar * SDxbar;
upper <- xbar + zstar * SDxbar;
zstat <- (xbar - mu0) / SDxbar;
pvalue <- 2 * (1 - pnorm( abs(zstat)));
# part (b) - check some numerical summaries
favstats(xbar);
zbar <- (xbar - mu0) / (sigma/sqrt(n));
zbar <- (xbar - mu0) / (sigma/sqrt(n));
# part (b) - check some numerical summaries
favstats(xbar);
zbar <- (xbar - mu0) / (sigma/sqrt(n));
favstats(zbar)
zbar <- (xbar - mu0) / (sigma/sqrt(n));
favstats(zbar)
# part (c) - generate histogram and boxplot of the sample means.
library(mosaic)
# part (d)
#sort the sample means
#SortedNormalSimulations <- data.frame(NormalSimulations[order(xbar),]);
#attach(SortedNormalSimulations);
# smallest 50 xbars
#head( SortedNormalSimulations, 50);
# largest 50 xbars
#tail( SortedNormalSimulations, 50);
num.lower = sum(mu < lower);
num.upper = sum(mu > upper);
num.total = num.lower + num.upper;
num.lower
num.upper
histogram(xbar, bins = 15, color = "white");
# part (c) - generate histogram and boxplot of the sample means.
library(mosaic)
bwplot(xbar);
# part (c) - generate histogram and boxplot of the sample means.
library(openintro)
histogram(xbar, bins = 15, color = "white");
bwplot(xbar);
#set up simulation constants
# sample size
n = 12
# part (c) - generate histogram and boxplot of the sample means.
library(openintro)
histogram(xbar, bins = 15, color = "white");
bwplot(xbar);
install.packages("mosaic", lib="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
install.packages(backports)
# part (c) - generate histogram and boxplot of the sample means.
library(mosaic)
# part (c) - generate histogram and boxplot of the sample means.
library(mosaic);
histogram(xbar, bins = 15, color = "white");
library(lattice)
library(tidyverse)
# part (c) - generate histogram and boxplot of the sample means.
library(mosaic)
histogram(xbar, bins = 15, color = "white");
bwplot(xbar);
histogram(xbar, bins = 15, color = "white");
bwplot(xbar);
histogram(xbar, bins = 15, color = "white");
bwplot(xbar);
# part (e) - num of times rejecting H_0: mu = 25
num.rejected <- sum(pvalue <= alpha);
num.rejected
num.rejected1 <- sum(pvalue1 <= alpha);
# part (f) -
mu1 <- 27
zstat1 <- (xbar - mu1) / SDxbar;
pvalue1 <- 2 * (1 - pnorm( abs(zstat1)));
num.rejected1 <- sum(pvalue1 <= alpha);
num.rejected1
pt(q=-3.3,df=25,lower.tail = TRUE)
2*pt(q=-3.3,df=25,lower.tail = TRUE)
2*pt(-3.303,df=50)
2*pt(q=-3.303,df=50,lower.tail = TRUE)
source("~/.active-rstudio-document", echo=TRUE)
rain = read.table("rainfalls.txt", h=T)
library(lattice)
rain = read.table("rainfalls.txt", h=T)
library(openintro)
rain = read.table("rainfalls.txt", h=T)
library(lattice)
bwplot(Rainfall ~ Treatment, data=rain)
rain = read.table("rainfalls.txt", h=T)
rain = read.table("rainfalls.txt", h=T)
library(lattice)
bwplot(Rainfall ~ Treatment, data=rain)
rain = read.table("rainfalls.txt", h=T)
rain = read.table("rainfalls.txt", h=T)
library(mosaic)
library(mosaic)
rain = read.table("rainfalls.txt", h=T)
library(lattice)
bwplot(Rainfall ~ Treatment, data=rain)
source("~/.active-rstudio-document", echo=TRUE)
rain = read.table("rainfalls.txt", h=T)
library(lattice)
bwplot(Rainfall ~ Treatment, data=rain)
rain = read.table("rainfalls.txt", h=T)
rain = read.table("rainfalls.txt", h=T)
rainfalls <- read.csv("~/Downloads/rainfalls.txt", sep="")
View(rainfalls)
rain = read.table("rainfalls.txt", h=T)
rain = read.table("rainfalls.txt", h=T)
rain = read.table("rainfalls.txt", h=T)
rain = read.table("rainfalls.txt", h=T)
pz(3.39)
pz(3.39)
pt(3.39)
source("~/.active-rstudio-document", echo=TRUE)
?bdims
> mylm = lm(hgt~sho.gi, data=bdims)
mylm = lm(hgt~sho.gi, data=bdims)
summary(mylm)
summary(mylm)
mylm = lm(hgt~sho.gi, data=bdims)
data(bdims)
mylm = lm(hgt~sho.gi, data=bdims)
mylm = lm(hgt~sho.gi, data=bdims)
summary(mylm)
source("~/.active-rstudio-document", echo=TRUE)
mylm = lm(hgt~sho_gi, data=bdims)
summary(mylm)
mylm = lm(hgt~sho_gi, data=bdims)
mylm
boxplot(bdims)
pt(.95,24)
2*pt(.05,24)
2*pt(.05,24)
2*pt(.5,24)
2*pt(.25,24)
2*pt(.97.5,24)
2*pt(.975,24)
pt(17.067,51)
pt(17.067,51,lower.tail = FALSE)
pt(-20.54,2253,lower.tail = T)
2*pt(-20.54,2253,lower.tail = T)
2*pt(-20.54,2253)
2*pnorm(-20.54,2253)
pnorm(-20.54)
2*pnorm(-20.54)
2*pt(2.3745,13,lower.tail = F)
2*pt(-3.3,25,lower.tail = T)
pnorm(3.39,lower.tail = F)
pnorm(-.29,lower.tail = T)
pnorm(-.29,lower.tail = T)*2
pnorm(-.29,lower.tail = T)*2
pnorm(24.22)
pnorm(24.22,lower.tail=F)
pt(1.859,6.lower.tail=F)
pt(1.859,6,lower.tail=F)
pt(1.905,17,lower.tail = F)
pt(-4.341,11)
pnorm(1.732, lower.tail = F)
pnorm(1.732, lower.tail = T)
2*pt(-10.714,lower.tail = T)
2*pt(-10.714,82,lower.tail = T)
pt(2300,179,lower.tail = F)
pt(6.84,179,lower.tail = F)
pt(3.16,9,lower.tail = F)
pnorm(6.026, lower.tail = F)
?p
?print
print("hello")
install.packages("AER")
1L
1L
x<-1
length(x)
?rm
?rm
?rm
1L
x<-1
#vectors of size 1
x<-1
length(x)
?rm
percentile <- pnorm(1.5042)
percentile <- pnorm(1.5042)
percentile <- pnorm(1.5042)
pnorm(1.5042)
1-pnorm(1.5042)
(1-pnorm(1.5042))*2
qnorm(.95)
qnorm(.9)
qnorm(.95)
# install packages
library(AER)
library(dplyr)
library(tidyr)
library(ggplot2)
library(readxl)
# set up working directory
getwd
setwd("/users/nachtloe/Documents/GitHub/ECON-21020/")
# using data frame
data1 <- read_excel("cps04.xlsx")
data2 <- read_excel("fertility.xlsx")
summary(data1)
# Question 4
# i Estimate the model using OLS and construct a 95% confidence interval
# for the effect of being female on income.
lm_female <- lm(AHE ~ Female, data=data1)
summary(lm_female)
confint(lm_female, level = .95)
lm1 <- lm(AHE ~ HS + College, data = data1)
summary(lm1)
(12.7850-4.8959)/sqrt(.1483^2 + .1561^2)
sqrt(nrow(data1))*(12.7850-4.8959)/sqrt(.1483^2 + .1561^2)
sqrt(nrow(data1))*(12.7850-4.8959)\sqrt(.1483^2 + .1561^2)
nrow(data1)
lm1 <- lm(AHE ~ HS + College, data = data1)
standard_errors <- sqrt(diag(vcov(lm2)))
lm2 <- lm(AHE ~ HS + College, data = data1)
coefficients <- coef(lm2)
standard_errors <- sqrt(diag(vcov(lm2)))
(standard_errors[2]^2 + standard_errors[3]^2)
# Calculate the test statistic
test_statistic <- (coefficients[2] - coefficients[3]) / sqrt
lm2 <- lm(AHE ~ HS + College, data = data1)
coefficients <- coef(lm2)
standard_errors <- sqrt(diag(vcov(lm2)))
# Calculate the test statistic
test_statistic <- (coefficients[2] - coefficients[3]) / sqrt
# Calculate the test statistic
test_statistic <- (coefficients[2] - coefficients[3]) /
sqrt(standard_errors[2]^2 + standard_errors[3]^2)
print(test_statistic)
# Calculate the test statistic
test_statistic <- (coefficients[3] - coefficients[2]) /
sqrt(standard_errors[2]^2 + standard_errors[3]^2)
print(test_statistic)
lm2 <- lm(AHE ~ HS + College, data = data1)
coefficients2 <- coef(lm2)
standard_errors2 <- sqrt(diag(vcov(lm2)))
# Calculate the test statistic
test_statistic2 <- (coefficients2[3] - coefficients2[2]) /
sqrt(standard_errors2[2]^2 + standard_errors2[3]^2)
print(test_statistic2)
lm1 <- lm(AHE ~ HS + College, data = data1)
coefficients1 <- coef(lm1)
standard_errors1 <- sqrt(diag(vcov(lm1)))
# Calculate the test statistic
test_statistic1 <- (coefficients1[3] - coefficients1[2]) /
sqrt(standard_errors1[2]^2 + standard_errors1[3]^2)
print(test_statistic1)
# Fit a multiple linear regression model
lm3 <- lm(mpg ~ Female + College + Female * College + HS + Female * HS, data = data1)
# Fit a multiple linear regression model
lm3 <- lm(AHE ~ Female + College + Female * College + HS + Female * HS, data = data1)
# Test the hypothesis
hypothesis_matrix <- matrix(c(0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), nrow = 2)
test_result <- linearHypothesis(model, hypothesis_matrix, test = "F")
test_result <- linearHypothesis(lm3, hypothesis_matrix, test = "F")
# Print the test result
test_result
# Test the hypothesis
hypothesis_matrix <- matrix(c(0, 0, 0, 0, 1, 0, 0, 0, 0, 1), nrow = 2)
test_result <- linearHypothesis(lm3, hypothesis_matrix, test = "F")
# Print the test result
test_result
# Test the hypothesis
hypothesis_matrix <- matrix(c(0,0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), nrow = 2)
test_result <- linearHypothesis(lm3, hypothesis_matrix, test = "F")
# Print the test result
test_result
# 5. How does fertility affect labor supply?
# (a) Regress weeksworked on the indicator variable morekids using OLS. On
# average, do women with more than two children work less than women with
# two children? How much less?
summary(data2)
lm5a <- lm(weeksworked ~ morekids, data2)
lm5a <- lm(weeksm1 ~ morekids, data2)
summary(lm5a)
lm5c <- lm(morekids ~ samesex, data2)
summary(lm5c) # this gives coefficient: -5.38700
# (e) Estimate the IV regression of weeksworked on morekids using samesex as
# an instrument. How large is the fertility effect on labor supply?
formula <- weeksm1 ~ morekids | samesex
# Fit the instrumental variable regression model
lm5e <- ivreg(formula, data = data2)
# Print the results
summary(lm5e)
